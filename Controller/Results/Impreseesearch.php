<?php
/**
 *  Retreive search results from Impresee
 *  using search code given in GET param.
 */
namespace Impresee\ImpreseeVisualSearch\Controller\Results;

use Magento\Framework\App\Action\Action;
use Magento\Framework\App\Action\Context;
use Magento\Framework\View\Result\PageFactory;
use Magento\Store\Model\StoreManagerInterface;
use Magento\Framework\Controller\Result\JsonFactory as MagentoJson;
use Magento\Framework\App\Config\ScopeConfigInterface;
use Impresee\ImpreseeVisualSearch\Helper\Codes as CodesHelper;

class Impreseesearch extends Action
{
  /**
   * URL of the search API
   * @var string
   */
    protected $_service;
  /**
   * Results from a search
   * @var string
   */
    protected $_data;
  /**
   * Kind of search ("sketch" or "photo")
   * @var string
   */
    protected $_typeOfSearch;
  /**
   * The path to results page
   * @var string
   */
    protected $_resultsUrl;
  /**
   * To load Impresee codes from db
   * @var Impresee\ImpreseeVisualSearch\Helper\Codes
   */
    protected $_codesHelper;
  /**
   * The search unique Code generated by Impresee
   * @var string
   */
    protected $_searchUid;
  /**
   * Url to results
   * @var string
   */
    protected $_finalUrl;
  /**
   * To give back a JSON object
   * @var Magento\Framework\Controller\Result\JsonFactory
   */
    protected $_jsonPageFactory;
  /**
   * Store context
   * @var StoreManagerInterface
   */
    protected $_storeManagerInterface;
  /**
   *   Constructor
   * @param \Magento\Framework\App\Action\Context $context
   * @param \Magento\Framework\View\Result\PageFactory $resultPageFactory
   * @param Magento\Framework\Registry
   * @param Impresee\ImpreseeVisualSearch\Model\MakeCollection
   */
    public function __construct(
        Context $context,
        PageFactory $resultPageFactory,
        CodesHelper $Codes,
        MagentoJson $jsonFactory,
        StoreManagerInterface $storeManagerInterface,
        ScopeConfigInterface $scopeConfig
    ) {
        $this->_codesHelper      = $Codes;
        $this->resultPageFactory = $resultPageFactory;
        $this->_jsonPageFactory  = $jsonFactory;
        $this->_storeManagerInterface = $storeManagerInterface;
        $this->_scopeConfig = $scopeConfig;
        parent::__construct($context);
    }

  /**
   * Return a Json with the url of the search results
   * @return Magento\Framework\Controller\Result\Json
   */
    public function execute()
    {
        $data = file_get_contents("php://input");
        $post = json_decode($data, true);
        $this->_typeOfSearch = $post["type"];
        $this->_data         = $post["data"];
        $this->_resultsUrl   = $post["url"];
        $this->getService(\Magento\Store\Model\ScopeInterface::SCOPE_STORE);
        $this->makeSearch();
        $result = $this->_jsonPageFactory->create();
        if (isset($this->_searchUid)) {
            $responseUrl = ["url" =>$this->_resultsUrl . "?type=" . $this->_typeOfSearch . "&search_uid=" . $this->_searchUid . "&product_list_order=similarity"];
        } else {
            $responseUrl = ["url" => $this->_resultsUrl . "?type=none&search_uid=none"];
        }
          return $result->setData($responseUrl);
    }

  /**
   * Save on $this->_service the service URL nedeed to make a search
   * @param \Magento\Store\Model\ScopeInterface::SCOPE_STORE $store
   */
    public function getService($storeScope)
    {
        if ($this->_typeOfSearch == "sketch") {
            $this->_service = $this->_codesHelper->getSketchUrl($storeScope);
        }
        if ($this->_typeOfSearch == "photo") {
            $this->_service = $this->_codesHelper->getPhotoUrl($storeScope);
        }
    }
  /**
   * Make a curl call to our visual search services, using the unique code
   * provided by us, saved in core_config_data table.
   * @return string (Json object)
   */
    public function makeSearch()
    {
        $headers = [];
        $headers[] = "Content-Type: application/json";
        $curlCall = curl_init();
        $post = ["search_file_filename" => "image.jpg", "search_file_base64" => $this->_data];
        curl_setopt($curlCall, CURLOPT_URL, $this->_service);
        curl_setopt($curlCall, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($curlCall, CURLOPT_POST, true);
        curl_setopt($curlCall, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($curlCall, CURLOPT_POSTFIELDS, json_encode($post));
        $result = curl_exec($curlCall);
        if (curl_errno($curlCall)) {
            return null;
        } else {
            $result = json_decode($result, true);
            if ($result["status"] == 0) {
                $this->_searchUid = $result["search_uid"];
                return $result;
            } else {
                return null;
            }
        }
    }
}
